name: Android Release Build

# 触发条件：当创建一个新的 GitHub Release 时触发
on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 授予工作流写入仓库内容的权限，包括上传 Release Assets
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Decode Keystore
        # 从 secrets 中读取 Base64 字符串并解码回 .jks 文件
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > ${{ github.workspace }}/release-keystore.jks

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        # 运行 Gradle 打包命令，并通过 env 传入 secrets
        run: ./gradlew assembleRelease
        env:
          KEYSTORE_FILE: ${{ github.workspace }}/release-keystore.jks
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      - name: Find APK file
        # 找到构建产物 APK 文件的路径
        id: find_apk
        run: |
          apk_path=$(find app/build/outputs/apk/package/release/ScreenSticker-package-release.apk -name '*.apk' | head -n 1)
           if [ -z "$apk_path" ]; then
            echo "::error::APK file not found!"
            # (可选) 添加一个 ls 命令来调试，看看文件到底生成在了哪里
            ls -R app/build/outputs/
            exit 1
          fi
          echo "Found APK at: $apk_path"
          echo "path=$apk_path" >> $GITHUB_OUTPUT

      - name: Upload APK to Release
        # 使用社区推荐的、更现代的 Action
        uses: softprops/action-gh-release@v2
        with:
          # 使用通配符自动查找并上传所有 APK 文件
          # 请确认你的模块名是 'app'，如果不是请修改
          files: app/build/outputs/apk/package/release/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}